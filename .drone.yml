kind: pipeline
type: docker
name: default

# 限制 amd64的runner 执行本脚本。
#platform:
#  os: linux
#  arch: amd64

clone:
  depth: 1
  disable: true

steps:
#  # 标记runner服务ip
#  - name: name
##    image: curlimages/curl:7.77.0
#    image: alpine:3.13
#    pull: if-not-exists
#    environment:
#      RUNNER_NAME: ${DRONE_RUNNER_NAME}
#    commands:
##      - env
#      - echo ${RUNNER_NAME}
##      - env
##      - curl -L http://wx.scjtqs.com/ip.php


  # 从github拉取代码 加上代理
  - name: clone
    image: alpine/git
    pull: if-not-exists
#    environment:
#      https_proxy:
#        from_secret: http_proxy
#      http_proxy:
#        from_secret: http_proxy
#      all_proxy:
#        from_secret: socket_proxy
    commands:
      - git clone --depth 1 https://hub.fastgit.org/scjtqs/jd_cookie.git -b $DRONE_BRANCH .
#      - "[ ''$DRONE_BRANCH'' != 'master' ] &&  [ ''$DRONE_BANCH'' != 'main' ] && git switch -c ''$DRONE_BRANCH''"
#      - git checkout $DRONE_COMMIT
        
  - name: buildtest
    image: golang:1.16-alpine
    pull: if-not-exists
#    environment:
#      GOPROXY: "http://goproxy.cn,direct"
#      CGO_ENABLED: 1
#      GO111MODULE: "on"
#      CGO_LDFLAGS: "-static"
    commands:
      - go env -w GOPROXY="http://goproxy.cn,direct"
      - go env -w GO111MODULE=on
      - sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories
      - apk add --no-cache gcc musl-dev
      - go install github.com/mattn/go-sqlite3
#      - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - go mod tidy
      - go env -w CGO_ENABLED=1
      - go env -w CGO_LDFLAGS="-static"
      - CGO_ENABLED=1 CGO_LDFLAGS="-static" go build  -ldflags  "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_COMMIT" -installsuffix cgo  -o test
      - ./test -h
    depends_on:
      - clone
#    volumes:
#      - name: dockersock
#        path: /var/run

  # go build
  - name: build
    image: golang:1.16-buster
    pull: if-not-exists
#    environment:
#      GOPROXY: "http://goproxy.cn,direct"
#      GO111MODULE: "on"
#      CGO_ENABLED: 1
#      CGO_LDFLAGS: "-static"
    commands:
     - go env -w GOPROXY="http://goproxy.cn,direct"
     - go env -w GO111MODULE=on
#      - sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories
#      - sed -i 's#http://deb.debian.org#https://mirrors.163.com#g' /etc/apt/sources.list
     - |
       echo '
        deb http://mirrors.163.com/debian/ buster main non-free contrib
        deb http://mirrors.163.com/debian/ buster-updates main non-free contrib
        deb http://mirrors.163.com/debian/ buster-backports main non-free contrib
        deb http://mirrors.163.com/debian-security/ buster/updates main non-free contrib

        deb-src http://mirrors.163.com/debian/ buster main non-free contrib
        deb-src http://mirrors.163.com/debian/ buster-updates main non-free contrib
        deb-src http://mirrors.163.com/debian/ buster-backports main non-free contrib
        deb-src http://mirrors.163.com/debian-security/ buster/updates main non-free contrib
        ' > /etc/apt/sources.list
#      - apk add --no-cache gcc musl-dev sqlite-static sqlite-dev sqlite gcc-arm-none-eabi gcc-aarch64-none-elf gcc-cross-embedded openrc
     - apt-get update -y && apt-get install -y build-essential gcc-i686-linux-gnu g++-i686-linux-gnu gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf g++-aarch64-linux-gnu g++-arm-linux-gnueabihf mingw-w64   gcc-mips64-linux-gnuabi64  g++-mips64-linux-gnuabi64 gcc-powerpc64-linux-gnu g++-powerpc64-linux-gnu gcc-mips-linux-gnu  g++-mips-linux-gnu
     - go mod tidy
     - go env -w CGO_ENABLED=0
#      - go env -w CGO_LDFLAGS="-static"
     - CGO_ENABLED=1 GOOS=linux GOARCH=amd64     CGO_LDFLAGS="-static"    go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo -o dist/jdcookie_v3_linux_amd64_all
     - CGO_ENABLED=1 CC=i686-linux-gnu-gcc CXX=i686-linux-gnu-g++ GOOS=linux GOARCH=386           go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo -o dist/jdcookie_v3_linux_i386_all
     - CGO_ENABLED=1 CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ GOOS=linux GOARCH=arm   GOARM=7 go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo  -o dist/jdcookie_v3_linux_armv7_all
     - CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++  GOOS=linux GOARCH=arm64         go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo  -o dist/jdcookie_v3_linux_arm64_all
     - CGO_ENABLED=1 CC=powerpc64-linux-gnu-gcc CXX=powerpc64-linux-gnu-g++ GOOS=linux GOARCH=ppc64         go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo -o dist/jdcookie_v3_linux_ppc64_all
     - CGO_ENABLED=0 GOOS=linux GOARCH=ppc64le       go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo -o dist/jdcookie_v3_linux_ppc64le
     - CGO_ENABLED=1 CC=mips-linux-gnu-gcc CXX=mips-linux-gnu-g++  GOOS=linux GOARCH=mips          go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo -o dist/jdcookie_v3_linux_mips_all
     - CGO_ENABLED=0 GOOS=linux GOARCH=mipsle        go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo -o dist/jdcookie_v3_linux_mipsle
     - CGO_ENABLED=1 CC=mips64-linux-gnuabi64-gcc CXX=mips64-linux-gnuabi64-g++ GOOS=linux GOARCH=mips64        go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo -o dist/jdcookie_v3_linux_mips64_all
     - CGO_ENABLED=0 GOOS=linux GOARCH=mips64le      go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo -o dist/jdcookie_v3_linux_mips64le
     - CGO_ENABLED=1 CC=i686-w64-mingw32-gcc CXX=i686-w64-mingw32-g++   GOOS=windows GOARCH=386         go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo  -o dist/jdcookie_v3_windows_i386_all.exe
     - CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc  CXX=x86_64-w64-mingw32-g++ GOOS=windows GOARCH=amd64       go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo -o dist/jdcookie_v3_windows_amd64_all.exe
     - CGO_ENABLED=0 GOOS=windows GOARCH=arm GOARM=7 go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo -o dist/jdcookie_v3_windows_arm.exe
     - CGO_ENABLED=0 GOOS=darwin GOARCH=arm64        go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo -o dist/jdcookie_v3_darwin_arm64
     - CGO_ENABLED=0 GOOS=darwin GOARCH=amd64        go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo -o dist/jdcookie_v3_darwin_amd64
#      - GOOS=android GOARCH=arm   GOARM=7      go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo -o dist/jdcookie_v3_android_arm
#      - GOOS=android GOARCH=arm64       go build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -installsuffix cgo -o dist/jdcookie_v3_android_arm64
    depends_on:
      - buildtest
#    when:
#      event: tag
#    volumes:
#      - name: dockersock
#        path: /var/run

  # 发布github的resease
  - name: publish
    image: plugins/github-release
    pull: if-not-exists
    settings:
      api_key:
        from_secret: github_token
      files: dist/*
#      title: v1.0.0
#      note:  "第一个公开版本，只提取cookie，不带推送更新cookie到服务器"
#      draft: true
#      overwrite: true
    when:
      event: tag
    depends_on:
      - build

#  # docker buildx 多平台镜像编译
#  - name: docker buildx
#    image: jdrouet/docker-with-buildx:stable
#    pull: if-not-exists
#    volumes:
#      - name: dockersock
#        path: /var/run
#    environment:
#      DOCKER_DRIVER: overlay2
#      DOCKER_USERNAME:
#        from_secret: docker_username
#      DOCKER_PASSWORD:
#        from_secret: docker_password
#    commands:
#      - /bin/sh ./buildx.sh
#    depends_on:
#      - buildtest
#    when:
#      branch:
#        exclude:
#          - feature/*
#      event:
#        - push
#        - pull_request
#        - tag
#        - promote
#        - rollback

#services:
#  - name: docker
#    image: docker:dind
#    detach: true
#    privileged: true
#    volumes:
#      - name: dockersock
#        path: /var/run

volumes:
  - name: dockersock
    temp: {}


trigger:
#  branch:
#    - master
  event:
    - custom
    - push
    - cron
    - tag
