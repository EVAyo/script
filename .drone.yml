kind: pipeline
type: docker
name: default

# 限制 amd64的runner 执行本脚本。
platform:
  os: linux
  arch: amd64

clone:
  depth: 1
  disable: true

steps:
  # 标记runner服务ip
  - name: ip
    image: curlimages/curl:7.77.0
    pull: if-not-exists
    commands:
#      - env
      - curl -L http://wx.scjtqs.com/ip.php

  # 从github拉取代码 加上代理
  - name: clone
    image: alpine/git
    pull: if-not-exists
#    environment:
#      https_proxy:
#        from_secret: http_proxy
#      http_proxy:
#        from_secret: http_proxy
#      all_proxy:
#        from_secret: socket_proxy
    commands:
      - git clone --depth 1 https://hub.fastgit.org/scjtqs/jd_cookie.git -b $DRONE_BRANCH .
#      - "[ ''$DRONE_BRANCH'' != 'master' ] &&  [ ''$DRONE_BANCH'' != 'main' ] && git switch -c ''$DRONE_BRANCH''"
#      - git checkout $DRONE_COMMIT
        
  - name: buildtest
    image: golang:1.16-alpine
    pull: if-not-exists
    environment:
      GOPROXY: "http://goproxy.cn,direct"
      CGO_ENABLED: 0
      GO111MODULE: "on"
    commands:
      - go get -u github.com/gobuffalo/packr/v2/packr2
      - go mod tidy
      - packr2 build -a -ldflags  "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_COMMIT -extldflags '-static'" -o test
      - ./test -h
    depends_on:
      - clone

  # go build
  - name: build
    image: golang:1.16-alpine
    pull: if-not-exists
    environment:
      GOPROXY: "http://goproxy.cn,direct"
      GO111MODULE: "on"
      CGO_ENABLED: 0
    commands:
      - go get -u github.com/gobuffalo/packr/v2/packr2
      - go mod tidy
      - CGO_ENABLED=0 GOOS=windows GOARCH=386         packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_windows_i386.exe
      - CGO_ENABLED=0 GOOS=windows GOARCH=amd64       packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_windows_adm64.exe
      - CGO_ENABLED=0 GOOS=windows GOARCH=arm GOARM=7 packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_windows_arm.exe
      - CGO_ENABLED=0 GOOS=darwin GOARCH=arm64        packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_darwin_arm64
      - CGO_ENABLED=0 GOOS=darwin GOARCH=amd64        packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_darwin_amd64
      - CGO_ENABLED=0 GOOS=linux GOARCH=386           packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_linux_i386
      - CGO_ENABLED=0 GOOS=linux GOARCH=amd64         packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_linux_amd64
      - CGO_ENABLED=0 GOOS=linux GOARCH=arm   GOARM=7 packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_linux_armv7
      - CGO_ENABLED=0 GOOS=linux GOARCH=arm64         packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_linux_arm64
      - CGO_ENABLED=0 GOOS=linux GOARCH=ppc64         packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_linux_ppc64
      - CGO_ENABLED=0 GOOS=linux GOARCH=ppc64le       packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_linux_ppc64le
      - CGO_ENABLED=0 GOOS=linux GOARCH=mips          packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_linux_mips
      - CGO_ENABLED=0 GOOS=linux GOARCH=mipsle        packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_linux_mipsle
      - CGO_ENABLED=0 GOOS=linux GOARCH=mips64        packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_linux_mips64
      - CGO_ENABLED=0 GOOS=linux GOARCH=mips64le      packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_linux_mips64le
#      - CGO_ENABLED=0 GOOS=android GOARCH=arm         packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_android_arm
#      - CGO_ENABLED=0 GOOS=android GOARCH=arm64       packr2 build  -ldflags   "-w -s -X main.Build=`date +%FT%T%z` -X main.Version=$DRONE_TAG" -o dist/jdcookie_v2_android_arm64
    depends_on:
      - buildtest
    when:
      event: tag

  # 发布github的resease
  - name: publish
    image: plugins/github-release
    pull: if-not-exists
    settings:
      api_key:
        from_secret: github_token
      files: dist/*
#      title: v1.0.0
#      note:  "第一个公开版本，只提取cookie，不带推送更新cookie到服务器"
#      draft: true
#      overwrite: true
    when:
      event: tag
    depends_on:
      - build

  # docker buildx 多平台镜像编译
  - name: docker buildx
    image: jdrouet/docker-with-buildx:stable
    pull: if-not-exists
    volumes:
      - name: dockersock
        path: /var/run
    environment:
      DOCKER_DRIVER: overlay2
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password
    commands:
      - /bin/sh ./buildx.sh
    depends_on:
      - buildtest
    when:
      branch:
        - master

services:
  - name: docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}


trigger:
#  branch:
#    - master
  event:
    - custom
    - push
    - cron
    - tag
