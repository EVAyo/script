/* 此脚本为搬运脚本，仅方便自己使用
 * 如需运行请自行添加环境变量：JD_TRY，值填 true 即可运行
 * 脚本兼容: Node.js
 * X1a0He留
 * 脚本是否耗时只看args_xh.maxLength的大小
 * 上一作者说了每天最多300个商店，总上限为500个，jd_unsubscribe.js我已更新为批量取关版
 * 请提前取关至少250个商店确保京东试用脚本正常运行
 *
 * @Address: https://github.com/X1a0He/jd_scripts_fixed/blob/main/jd_try_xh.js
 * @LastEditors: X1a0He
 */
const $ = new Env("京东试用");
const URL = "https://api.m.jd.com/client.action";
let trialActivityIdList = [];
let trialActivityTitleList = [];
let notifyMsg = "";
let size = 1;
$.isPush = true;
$.isLimit = false;
$.isForbidden = false;
$.wrong = false;
$.totalPages = 0;
$.giveupNum = 0;
$.successNum = 0;
$.completeNum = 0;
$.getNum = 0;
$.try = true;
$.sentNum = 0;
$.cookiesArr = [];
$.innerKeyWords = [
    "幼儿园", "教程", "英语", "辅导", "培训",
    "孩子", "小学", "成人用品", "套套", "情趣",
    "自慰", "阳具", "飞机杯", "男士用品", "女士用品",
    "内衣", "高潮", "避孕", "乳腺", "肛塞", "肛门",
    "宝宝", "玩具", "芭比", "娃娃", "男用",
    "女用", "神油", "足力健", "老年", "老人",
    "宠物", "饲料", "丝袜", "黑丝", "磨脚",
    "脚皮", "除臭", "性感", "内裤", "跳蛋",
    "安全套", "龟头", "阴道", "阴部"
]
//下面很重要，遇到问题请把下面注释看一遍再来问
let args_xh = {
  /*
   * 商品原价，低于这个价格都不会试用，意思是
   * A商品原价49元，试用价1元，如果下面设置为50，那么A商品不会被加入到待提交的试用组
   * B商品原价99元，试用价0元，如果下面设置为50，那么B商品将会被加入到待提交的试用组
   * C商品原价99元，试用价1元，如果下面设置为50，那么C商品将会被加入到待提交的试用组
   * 默认为0
   * */
  jdPrice: process.env.JD_TRY_PRICE * 1 || 0,
  /*
   * 获取试用商品类型，默认为1，原来不是数组形式，我以为就只有几个tab，结果后面还有我服了
   * 1 - 精选
   * 2 - 闪电试
   * 3 - 家用电器(可能会有变化)
   * 4 - 手机数码(可能会有变化)
   * 5 - 电脑办公(可能会有变化)
   * ...
   * 下面有一个function是可以获取所有tabId的，名为try_tabList
   * 2021-09-06 12:32:00时获取到 tabId 16个
   * 可设置环境变量：JD_TRY_TABID，用@进行分隔
   * 默认为 1 到 5
   * */
  tabId: (process.env.JD_TRY_TABID && process.env.JD_TRY_TABID.split("@").map(Number)) || [1,2,3,4,5,6,7,8,9,10],
  /*
   * 试用商品标题过滤，黑名单，当标题存在关键词时，则不加入试用组
   * 当白名单和黑名单共存时，黑名单会自动失效，优先匹配白名单，匹配完白名单后不会再匹配黑名单，望周知
   * 例如A商品的名称为『旺仔牛奶48瓶特价』，设置了匹配白名单，白名单关键词为『牛奶』，但黑名单关键词存在『旺仔』
   * 这时，A商品还是会被添加到待提交试用组，白名单优先于黑名单
   * 已内置对应的 成人类 幼儿类 宠物 老年人类关键词，请勿重复添加
   * 可设置环境变量：JD_TRY_TITLEFILTERS，关键词与关键词之间用@分隔
   * */
  titleFilters: (process.env.JD_TRY_TITLEFILTERS && process.env.JD_TRY_TITLEFILTERS.split("@")) || [],
  /*
   * 试用价格(中了要花多少钱)，高于这个价格都不会试用，小于等于才会试用，意思就是
   * A商品原价49元，现在试用价1元，如果下面设置为10，那A商品将会被添加到待提交试用组，因为1 < 10
   * B商品原价49元，现在试用价2元，如果下面设置为1，那B商品将不会被添加到待提交试用组，因为2 > 1
   * C商品原价49元，现在试用价1元，如果下面设置为1，那C商品也会被添加到带提交试用组，因为1 = 1
   * 可设置环境变量：JD_TRY_TRIALPRICE，默认为0
   * */
  trialPrice: process.env.JD_TRY_TRIALPRICE * 1 || 0,
  /*
   * 最小提供数量，例如试用商品只提供2份试用资格，当前设置为1，则会进行申请
   * 若只提供5分试用资格，当前设置为10，则不会申请
   * 可设置环境变量：JD_TRY_MINSUPPLYNUM
   * */
  minSupplyNum: process.env.JD_TRY_MINSUPPLYNUM * 1 || 1,
  /*
   * 过滤大于设定值的已申请人数，例如下面设置的1000，A商品已经有1001人申请了，则A商品不会进行申请，会被跳过
   * 可设置环境变量：JD_TRY_APPLYNUMFILTER
   * */
  applyNumFilter: process.env.JD_TRY_APPLYNUMFILTER * 1 || 10000,
  /*
   * 商品试用之间和获取商品之间的间隔, 单位：毫秒(1秒=1000毫秒)
   * 可设置环境变量：JD_TRY_APPLYINTERVAL
   * 默认为3000，也就是3秒
   * */
  applyInterval: process.env.JD_TRY_APPLYINTERVAL * 1 || 5000,
  /*
   * 商品数组的最大长度，通俗来说就是即将申请的商品队列长度
   * 例如设置为20，当第一次获取后获得12件，过滤后剩下5件，将会进行第二次获取，过滤后加上第一次剩余件数
   * 例如是18件，将会进行第三次获取，直到过滤完毕后为20件才会停止，不建议设置太大
   * 可设置环境变量：JD_TRY_MAXLENGTH
   * */
  maxLength: process.env.JD_TRY_MAXLENGTH * 1 || 100,
  /*
   * 过滤种草官类试用，某些试用商品是专属官专属，考虑到部分账号不是种草官账号
   * 例如A商品是种草官专属试用商品，下面设置为true，而你又不是种草官账号，那A商品将不会被添加到待提交试用组
   * 例如B商品是种草官专属试用商品，下面设置为false，而你是种草官账号，那A商品将会被添加到待提交试用组
   * 例如B商品是种草官专属试用商品，下面设置为true，即使你是种草官账号，A商品也不会被添加到待提交试用组
   * 可设置环境变量：JD_TRY_PASSZC，默认为true
   * */
  passZhongCao: process.env.JD_TRY_PASSZC || true,
  /*
   * 是否打印输出到日志，考虑到如果试用组长度过大，例如100以上，如果每个商品检测都打印一遍，日志长度会非常长
   * 打印的优点：清晰知道每个商品为什么会被过滤，哪个商品被添加到了待提交试用组
   * 打印的缺点：会使日志变得很长
   *
   * 不打印的优点：简短日志长度
   * 不打印的缺点：无法清晰知道每个商品为什么会被过滤，哪个商品被添加到了待提交试用组
   * 可设置环境变量：JD_TRY_PLOG，默认为true
   * */
  printLog: process.env.JD_TRY_PLOG || true,
  /*
   * 白名单，是否打开，如果下面为true，那么黑名单会自动失效
   * 白名单和黑名单无法共存，白名单永远优先于黑名单
   * 可通过环境变量控制：JD_TRY_WHITELIST，默认为false
   * */
  whiteList: process.env.JD_TRY_WHITELIST || false,
  /*
   * 白名单关键词，当标题存在关键词时，加入到试用组
   * 例如A商品的名字为『旺仔牛奶48瓶特价』，白名单其中一个关键词是『牛奶』，那么A将会直接被添加到待提交试用组，不再进行另外判断
   * 就算设置了黑名单也不会判断，希望这种写得那么清楚的脑瘫问题就别提issues了
   * 可通过环境变量控制：JD_TRY_WHITELIST，用@分隔
   * */
  whiteListKeywords: (process.env.JD_TRY_WHITELISTKEYWORDS && process.env.JD_TRY_WHITELISTKEYWORDS.split("@")) || [],
  /*
   * 每多少个账号发送一次通知，默认为4
   * 可通过环境变量控制 JD_TRY_SENDNUM
   * */
  sendNum: process.env.JD_TRY_SENDNUM * 1 || 4,
};
//上面很重要，遇到问题请把上面注释看一遍再来问
!(async () => {
  console.log("X1a0He留：遇到问题请把脚本内的注释看一遍再来问，谢谢");
  console.log(`本脚本默认不运行，也不建议运行\n如需运行请自行添加环境变量：JD_TRY，值填：true\n`);
  await $.wait(500);
  if (process.env.JD_TRY && process.env.JD_TRY === "true") {
    await requireConfig();
    if (!$.cookiesArr[0]) {
      $.msg($.name, "【提示】请先获取京东账号一cookie\n直接使用NobyDa的京东签到获取", "https://bean.m.jd.com/", {"open-url": "https://bean.m.jd.com/"});
      return;
    }
    for (let i = 0; i < $.cookiesArr.length; i++) {
      if ($.cookiesArr[i]) {
        $.cookie = $.cookiesArr[i];
        $.UserName = decodeURIComponent($.cookie.match(/pt_pin=(.+?);/) && $.cookie.match(/pt_pin=(.+?);/)[1]);
        $.index = i + 1;
        $.isLogin = true;
        $.nickName = "";
        await totalBean();
        console.log(`\n开始【京东账号${$.index}】${$.nickName || $.UserName}\n`);
        if (!$.isLogin) {
          $.msg($.name, `【提示】cookie已失效`, `京东账号${$.index} ${$.nickName || $.UserName}\n请重新登录获取\nhttps://bean.m.jd.com/bean/signIndex.action`, {"open-url": "https://bean.m.jd.com/bean/signIndex.action"});
          await $.notify.sendNotify(`${$.name}cookie已失效 - ${$.UserName}`, `京东账号${$.index} ${$.UserName}\n请重新登录获取cookie`);
          continue;
        }
        $.totalTry = 0;
        $.totalSuccess = 0;
        $.nowTabIdIndex = 0;
        $.nowPage = 1;
        $.nowItem = 1;
        trialActivityIdList = [];
        trialActivityTitleList = [];
        $.isLimit = false;
        // 获取tabList的，不知道有哪些的把这里的注释解开跑一遍就行了
        // await try_tabList();
        // return;
        $.isForbidden = false;
        $.wrong = false;
        size = 1;
        while (trialActivityIdList.length < args_xh.maxLength && $.isForbidden === false) {
          if ($.nowTabIdIndex === args_xh.tabId.length) {
            console.log(`tabId组已遍历完毕，不在获取商品\n`);
            break;
          } else {
            await try_feedsList(args_xh.tabId[$.nowTabIdIndex], $.nowPage); //获取对应tabId的试用页面
          }
          if (trialActivityIdList.length < args_xh.maxLength) {
            console.log(`间隔等待中，请等待 2 秒\n`);
            await $.wait(2000);
          }
        }
        if ($.isForbidden === false && $.isLimit === false) {
          console.log(`稍后将执行试用申请，请等待 2 秒\n`);
          await $.wait(2000);
          for (let i = 0; i < trialActivityIdList.length && $.isLimit === false; i++) {
            if ($.isLimit) {
              console.log("试用上限");
              break;
            }
            await try_apply(trialActivityTitleList[i], trialActivityIdList[i]);
            console.log(`间隔等待中，请等待 ${args_xh.applyInterval} ms\n`);
            await $.wait(args_xh.applyInterval);
          }
          console.log("试用申请执行完毕...");
          // await try_MyTrials(1, 1)    //申请中的商品
          $.giveupNum = 0;
          $.successNum = 0;
          $.getNum = 0;
          $.completeNum = 0;
          await try_MyTrials(1, 2); //申请成功的商品
          // await try_MyTrials(1, 3)    //申请失败的商品
          await showMsg();
        }
      }
      if ($.isNode()) {
        if ($.index % args_xh.sendNum === 0) {
          $.sentNum++;
          console.log(`正在进行第 ${$.sentNum} 次发送通知，发送数量：${args_xh.sendNum}`)
          await $.notify.sendNotify(`${$.name}`, `${notifyMsg}`)
          notifyMsg = "";
        }
      }
    }
    if ($.isNode()) {
      if (($.cookiesArr.length - ($.sentNum * args_xh.sendNum)) < args_xh.sendNum) {
        console.log(`正在进行最后一次发送通知，发送数量：${($.cookiesArr.length - ($.sentNum * args_xh.sendNum))}`)
        await $.notify.sendNotify(`${$.name}`, `${notifyMsg}`)
        notifyMsg = "";
      }
    }
  } else {
    console.log(`\n您未设置运行【京东试用】脚本，结束运行！\n`);
  }
})()
  .catch((e) => {
    console.error(`❗️ ${$.name} 运行错误！\n${e}`);
  })
  .finally(() => $.done());

function requireConfig() {
  return new Promise((resolve) => {
    console.log("开始获取配置文件\n");
    $.notify = $.isNode() ? require("./sendNotify") : { sendNotify: async () => {} };
    //获取 Cookies
    $.cookiesArr = [];
    if ($.isNode()) {
      //Node.js用户请在jdCookie.js处填写京东ck;
      const jdCookieNode = require("./jdCookie.js");
      Object.keys(jdCookieNode).forEach((item) => {
        if (jdCookieNode[item]) $.cookiesArr.push(jdCookieNode[item]);
      });
      if (process.env.JD_DEBUG && process.env.JD_DEBUG === "false") console.log = () => {};
    } else {
      //IOS等用户直接用NobyDa的jd $.cookie
      $.cookiesArr = [$.getdata("CookieJD"), $.getdata("CookieJD2"), ...jsonParse($.getdata("CookiesJD") || "[]").map((item) => item.cookie)].filter((item) => !!item);
    }
    if (typeof process.env.JD_TRY_WHITELIST === "undefined") args_xh.whiteList = false;
    else args_xh.whiteList = process.env.JD_TRY_WHITELIST === "true";
    if (typeof process.env.JD_TRY_PLOG === "undefined") args_xh.printLog = true;
    else args_xh.printLog = process.env.JD_TRY_PLOG === "true";
    if (typeof process.env.JD_TRY_PASSZC === "undefined") args_xh.passZhongCao = true;
    else args_xh.passZhongCao = process.env.JD_TRY_PASSZC === "true";
    for (let keyWord of $.innerKeyWords) args_xh.titleFilters.push(keyWord);
    console.log(`共${$.cookiesArr.length}个京东账号\n`);
    console.log("=====环境变量配置如下=====");
    console.log(`jdPrice: ${typeof args_xh.jdPrice}, ${args_xh.jdPrice}`);
    console.log(`tabId: ${typeof args_xh.tabId}, ${args_xh.tabId}`);
    console.log(`titleFilters: ${typeof args_xh.titleFilters}, ${args_xh.titleFilters}`);
    console.log(`trialPrice: ${typeof args_xh.trialPrice}, ${args_xh.trialPrice}`);
    console.log(`minSupplyNum: ${typeof args_xh.minSupplyNum}, ${args_xh.minSupplyNum}`);
    console.log(`applyNumFilter: ${typeof args_xh.applyNumFilter}, ${args_xh.applyNumFilter}`);
    console.log(`applyInterval: ${typeof args_xh.applyInterval}, ${args_xh.applyInterval}`);
    console.log(`maxLength: ${typeof args_xh.maxLength}, ${args_xh.maxLength}`);
    console.log(`passZhongCao: ${typeof args_xh.passZhongCao}, ${args_xh.passZhongCao}`);
    console.log(`printLog: ${typeof args_xh.printLog}, ${args_xh.printLog}`);
    console.log(`whiteList: ${typeof args_xh.whiteList}, ${args_xh.whiteList}`);
    console.log(`whiteListKeywords: ${typeof args_xh.whiteListKeywords}, ${args_xh.whiteListKeywords}`);
    console.log("=======================");
    resolve();
  });
}

//获取tabList的，如果不知道tabList有哪些，跑一遍这个function就行了
function try_tabList() {
  return new Promise((resolve, reject) => {
    console.log(`获取tabList中...`);
    const body = JSON.stringify({previewTime: ""});
    let option = taskurl_xh("newtry", "try_tabList", body);
    $.get(option, (err, resp, data) => {
      try {
        if (err) {
          if (JSON.stringify(err) === `\"Response code 403 (Forbidden)\"`) {
            $.isForbidden = true;
            console.log("账号被京东服务器风控，不再请求该帐号");
          } else {
            console.log(JSON.stringify(err));
            console.log(`${$.name} API请求失败，请检查网路重试`);
          }
        } else {
          data = JSON.parse(data);
          if (data.success) {
            for (let tabId of data.data.tabList) console.log(`${tabId.tabName} - ${tabId.tabId}`);
          } else {
            console.log("获取失败", data);
          }
        }
      } catch (e) {
        reject(`⚠️ ${arguments.callee.name.toString()} API返回结果解析出错\n${e}\n${JSON.stringify(data)}`);
      } finally {
        resolve();
      }
    });
  });
}

//获取商品列表并且过滤 By X1a0He
function try_feedsList(tabId, page) {
  return new Promise((resolve, reject) => {
    const body = JSON.stringify({
      tabId: `${tabId}`,
      page: page,
      previewTime: "",
    });
    let option = taskurl_xh("newtry", "try_feedsList", body);
    $.get(option, (err, resp, data) => {
      try {
        if (err) {
          if (JSON.stringify(err) === `\"Response code 403 (Forbidden)\"`) {
            $.isForbidden = true;
            console.log("账号被京东服务器风控，不再请求该帐号");
          } else {
            console.log(JSON.stringify(err));
            console.log(`${$.name} API请求失败，请检查网路重试`);
          }
        } else {
          data = JSON.parse(data);
          let tempKeyword = ``;
          if (data.success) {
            $.totalPages = data.data.pages;
            $.nowPage === $.totalPages ? ($.nowPage = 1) : $.nowPage++;
            console.log(`第 ${size++} 次获取试用商品成功，tabId:${args_xh.tabId[$.nowTabIdIndex]} 的 第 ${page}/${$.totalPages} 页`);
            console.log(`获取到商品 ${data.data.feedList.length} 条`);
            for (let item of data.data.feedList) {
              if (item.applyNum === null) {
                args_xh.printLog ? console.log(`商品未到申请时间：${item.skuTitle}\n`) : "";
                continue;
              }
              if (trialActivityIdList.length >= args_xh.maxLength) {
                console.log("商品列表长度已满.结束获取");
                break;
              }
              if (item.applyState === 1) {
                args_xh.printLog ? console.log(`商品已申请试用：${item.skuTitle}\n`) : "";
                continue;
              }
              if (item.applyState !== null) {
                args_xh.printLog ? console.log(`商品状态异常，未找到skuTitle\n`) : "";
                continue;
              }
              if (args_xh.passZhongCao) {
                $.isPush = true;
                if (item.tagList.length !== 0) {
                  for (let itemTag of item.tagList) {
                    if (itemTag.tagType === 3) {
                      args_xh.printLog ? console.log("商品被过滤，该商品是种草官专属") : "";
                      $.isPush = false;
                      break;
                    }
                  }
                }
              }
              if (item.skuTitle && $.isPush) {
                args_xh.printLog ? console.log(`检测 tabId:${args_xh.tabId[$.nowTabIdIndex]} 的 第 ${page}/${$.totalPages} 页 第 ${$.nowItem++ + 1} 个商品\n${item.skuTitle}`) : "";
                if (args_xh.whiteList) {
                  if (args_xh.whiteListKeywords.some((fileter_word) => item.skuTitle.includes(fileter_word